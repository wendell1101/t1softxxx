<?php
trait kyc_status {

	/**
	 * @author Jhunel L. Ebero
	 * overview : Display the current kyc status by player
	 *
	 * details : display current kyc status by player with detailed information per kyc criterial
	 *
	 * KYC image is not in here,the file path store in table playerdetails.proof_filename
	 * KYC image in player_management.php uploadKYCPlayerImage() and delKYCPlayerImage()
	 *
	 * @param int $player_id	player_id
	 */
	public function player_kyc($playerId) {
		/*if (!$this->permissions->checkPermissions('show_kyc_status')) {
			$this->error_access();
		} else {*/
		if ($this->utils->isEnabledFeature('show_kyc_status')) {
			$this->load->model(array('player_kyc','kyc_status_model'));


			$playerInfo = $this->player->getPlayerById($playerId);

			$lang = $this->language_function->getCurrentLanguage();
			$this->loadTemplate('Player Management', '', '', 'player');

			$player_kyc_current_status = $this->player_kyc->getPlayerCurrentKycStatus($playerId);
			if(!empty($player_kyc_current_status)){
				if(isset($player_kyc_current_status['id'])){
					$this->generate_player_kyc_status($playerId,FALSE, $player_kyc_current_status['id'],TRUE);
				} else {
					$this->generate_player_kyc_status($playerId,FALSE,0,TRUE);
				}
			}


			$player_kyc_status = $this->player_kyc->getPlayerKycStatus($playerId);
			$player_current_kyc_status = json_decode($player_kyc_status[0]['kyc_status'],true);

			$data['kyc_status'] = $this->kyc_status_model->getAllKycStatus('order_id ASC');

			foreach ($data['kyc_status'] as $key => $datai) {
				switch ($lang) {
					case 1:
						$data['kyc_status'][$key]['description'] = $datai['description_english'];
						break;
					case 2:
						$data['kyc_status'][$key]['description'] = $datai['description_chinese'];
						break;
					case 3:
						$data['kyc_status'][$key]['description'] = $datai['description_indonesian'];
						break;
					case 4:
						$data['kyc_status'][$key]['description'] = $datai['description_vietnamese'];
						break;
					default:
						break;
				}
				$data['kyc_status'][$key]['status'] = $player_current_kyc_status[$datai['id']]['status'];
				$data['kyc_status'][$key]['current_kyc_status'] = $player_current_kyc_status[$datai['id']]['current_kyc_status'];
			} // EOF foreach

			$this->saveAction(self::ACTION_MANAGEMENT_TITLE, 'View Player KYC Status', "User " . $this->authentication->getUsername() . " view KYC Status of Account " . $playerInfo['username']);
			$data['playerId'] = $playerId;
			if ($player_kyc_status[0]['auto_generated']) {
				$data['generated_by'] = lang('System Generated');
			} else {
				$_generated_by = $player_kyc_status[0]['generated_by'];
				$_json = json_decode($_generated_by,true);
				if(!empty($_json)){
					$_end = end($_json);
					$generate_by = $_end['un'];
				}
				$data['generated_by'] = lang('Manually Generated By: ').$generate_by;
			}

			$data['allowed_withdrawal_status'] = ($this->generate_allowed_withdrawal_status($playerId)) ? lang('Yes') : lang('No');

			$data['current_kyc_status'] = $this->getPlayerCurrentStatus($playerId);
			$data['current_kyc_level'] = $this->player_kyc->getPlayerCurrentKycLevel($playerId);
			//var_dump($data['current_kyc_status']);die();
			$this->load->view('player_management/player_kyc', $data);
		}
		//}
	}

	/**
	 * @author Jhunel L. Ebero
	 * overview : Update kyc status by player
	 *
	 * details : Update kyc status by player manually by authorized admin user
	 *
	 * @param int $player_id	player_id
	 * @param int $selected_status
	 */
	public function manual_player_kyc_status($playerId,$selected_status){
		if ($this->utils->isEnabledFeature('show_kyc_status')) {
			$playerInfo = $this->player->getPlayerById($playerId);

			$action_response = $this->generate_player_kyc_status($playerId,FALSE,$selected_status,FALSE);

			$response = ($action_response) ? array( 'status' => "success",'message' => lang("Update Successful")) : array( 'status' => "fail",'message' => lang("Update Failed"));

			if($response['status'] == "success"){
				$this->savePlayerUpdateLog($playerId, "User " . $this->authentication->getUsername() . " update manually the KYC Status of Account " . $playerInfo['username'], $this->authentication->getUsername());

				$this->saveAction(self::ACTION_MANAGEMENT_TITLE, 'Manual Update Player KYC Status', "User " . $this->authentication->getUsername() . " update manually the KYC Status of Account " . $playerInfo['username']);
			}

			if ($this->input->is_ajax_request()) {
				$this->returnJsonResult($response);
				return;
			}
		}
	}

	 /**
	 * @author Jhunel L. Ebero
	 * overview : Update kyc status by player
	 *
	 * details : Update kyc status by player via auto system generating
	 *
	 * @param int $player_id	player_id
	 */
	public function automatic_player_kyc_status($playerId){
		if ($this->utils->isEnabledFeature('show_kyc_status')) {
			$this->load->model('kyc_status_model');
			$response = $this->kyc_status_model->automatic_player_kyc_status($playerId);
			if ($this->input->is_ajax_request()) {
				$this->returnJsonResult($response);
				return;
			}
		}
	}

	 /**
	 * @author Jhunel L. Ebero
	 * overview : Generate and update latest Kyc status by player
	 *
	 * details : Generate and update latest kyc status by checking the criteria of Kyc.
	 *
	 * @param int $player_id	player_id
	 * @param int $auto_generated true=1 / false=0
	 * @param int $set_current_status //0 current status if autogenerated generated
	 */
	public function generate_player_kyc_status($playerId,$auto_generated = TRUE,$set_current_status = 0,$criteria_refresh = FALSE){
		$this->load->model('kyc_status_model');
		return $this->kyc_status_model->generate_player_kyc_status($playerId,$auto_generated,$set_current_status,$criteria_refresh);
	}

	/**
	 * @author Jhunel L. Ebero
	 * overview : Check if player is depositor or non depositor
	 *
	 * details : Check if player is depositor or non depositor . Only approved deposit transaction only
	 *
	 * @param int $player_id	player_id
	 */
	public function player_depositor($playerId) {
		$this->load->model('kyc_status_model');
		return $this->kyc_status_model->checkNoAttachement($playerId);
	}

	/**
	 * @author Jhunel L. Ebero
	 * overview : Account name verification
	 *
	 * details : Check if player account name use in deposit is simmilar to registered real name in the system
	 *
	 * @param int $player_id	player_id
	 */
	public function player_identity_verification($playerId) {
		$this->load->model('kyc_status_model');
		return $this->kyc_status_model->player_identity_verification($playerId);
	}

	/**
	 * @author Jhunel L. Ebero
	 * overview : Check valid document verification
	 *
	 * details : Check if player player submitted a valid document via uploading a image copy of documents
	 *
	 * @param int $player_id	player_id
	 */
	public function player_valid_documents($playerId) {
		$this->load->model('kyc_status_model');
		return $this->kyc_status_model->player_valid_documents($playerId);
	}

	/**
	 * @author Jhunel L. Ebero
	 * overview : Summitted documment validation
	 *
	 * details : Check if the uploaded documents match the information to the system, such as: register name and proof of address
	 *
	 * @param int $player_id	player_id
	 */
	public function player_valid_identity_and_proof_of_address($playerId) {
		$this->load->model('kyc_status_model');
		return $this->kyc_status_model->player_valid_identity_and_proof_of_address($playerId);
	}

	public function player_valid_proof_of_income($playerId) {
		$this->load->model('kyc_status_model');
		return $this->kyc_status_model->player_valid_proof_of_income($playerId);
	}

	public function get_verification_info($playerId){
		$this->load->model('kyc_status_model');
		return $this->kyc_status_model->get_verification_info($playerId);
	}

	public function set_default_value_proof_filename($playerId) {
		$this->load->model('kyc_status_model');
		return $this->kyc_status_model->set_default_value_proof_filename($playerId);
	}

	public function update_verification_status($playerId) {
		if (!$this->permissions->checkPermissions('update_attached_documents')) {
			echo json_encode(lang('role.nopermission'));
		} else {
			$playerInfo = json_decode($this->player_model->getPlayerInfoById($playerId)['proof_filename'],true);
			$updateData = array();
			if(!empty($this->input->post('data'))) {
				$updateData = $this->input->post('data');
			}

			foreach ($playerInfo['verification'] as $key => $value) {
				$verification[$key]['auto_status'] = $value['auto_status'];
				if(in_array($key, $updateData)){
					$verification[$key]['status'] = self::TRUE;
				} else {
					$verification[$key]['status'] = self::FALSE;
				}
			}

			$this->update_proof_filename($playerId,$verification,$playerInfo['img_file'],$playerInfo['profile_image']);

			echo json_encode(lang('sys.gd25'));
		}
	}

	public function getPlayerCurrentStatus($playerId) {
		$this->load->model('kyc_status_model');
		$playerInfo = $this->player->getPlayerById($playerId);
		$this->saveAction(self::ACTION_MANAGEMENT_TITLE, 'Auto Generate Player KYC Status', "System done auto generated the KYC Status of Account " . $playerInfo['username']);
		$_playerCurrentStatus = $this->kyc_status_model->getPlayerCurrentStatus($playerId);
		return $_playerCurrentStatus;
	}

	public function update_proof_filename($playerId,$verification,$img_file,$profile_image) {
		$data = array(
			'proof_filename' => json_encode(array(
				'verification' => $verification,
				'img_file' => $img_file,
				'profile_image' => $profile_image,
			)),
		);

		$this->player->editPlayerDetails($data, $playerId);
	}

	public function addUpdateKYCManagement(){
		$this->load->library(array('form_validation'));
		$this->load->model('kyc_status_model');
		$input = $this->input->post();
		$target_function = $_POST['target_function'];
		$input['target_function'] = $target_function;

		$this->form_validation->set_rules('rate_code', lang('Rate Code'), 'trim|required|xss_clean');
		$this->form_validation->set_rules('description_english', lang('English Description'), 'trim|required|xss_clean');
		$this->form_validation->set_rules('description_chinese', lang('Chinese Description'), 'trim|required|xss_clean');
		$this->form_validation->set_rules('description_indonesian', lang('Indonesian Description'), 'trim|required|xss_clean');
		$this->form_validation->set_rules('description_vietnamese', lang('Vietnamese Description'), 'trim|required|xss_clean');
		$this->form_validation->set_rules('kyc_lvl', lang('KYC Level'), 'trim|required|xss_clean');

		if ($this->form_validation->run() == false) {

			$message = lang('player.mp14');

			if ($this->input->is_ajax_request()) {
				$this->returnJsonResult(array('status' => 'error', 'msg' => $message));
				return;
			}

			$this->alertMessage(self::MESSAGE_TYPE_ERROR, $message);

			redirect('/system_management/kyc_setting');
		} else {
			$this->kyc_status_model->addUpdateKyc($input);
			$this->alertMessage(self::MESSAGE_TYPE_SUCCESS, lang('sys.gd25'));
			redirect('/system_management/kyc_setting');
		}

	}

	public function getKycDetails(){
		$response = null;
		$input = $this->input->post();

		$this->load->model('kyc_status_model');

		$kycDetails = $this->kyc_status_model->getKycStatusInfo($input['id']);
		if(!empty($kycDetails)){
			if ($this->input->is_ajax_request()) {
				$response = $this->returnJsonResult($kycDetails);
			}else{
				$response = $kycDetails;
			}
		}
		return $response;
	}

	public function removeKycEntry(){

		$input = $this->input->post();

		$this->load->model('kyc_status_model');


		if(!empty($input['id'])){
			if($this->kyc_status_model->removeKYCDetails($input['id'])){
				$message = lang("Successfully Deleted!");
				$this->alertMessage(self::MESSAGE_TYPE_SUCCESS, $message);
				if ($this->input->is_ajax_request()) {
					$this->returnJsonResult(array('status' => 'success', 'msg' => $message));
					return;
				}else{
					redirect('/system_management/kyc_setting');
				}
			}
		}

		$message = lang("con.usm04");
		$this->alertMessage(self::MESSAGE_TYPE_ERROR, $message);
		if ($this->input->is_ajax_request()) {
			$this->returnJsonResult(array('status' => 'error', 'msg' => $message));
			return;
		}else{
			redirect('/system_management/kyc_setting');
		}
	}

	public function getTargetFunctionList(){
		$target_function = $this->utils->getConfig('kyc_target_function_list');
		return $target_function;
	}

	public function checkNoAttachement($playerId){
		$this->load->model('kyc_status_model');
		return $this->kyc_status_model->checkNoAttachement($playerId);
	}

	public function viewAttachedFileList(){
		if (!$this->permissions->checkPermissions('attached_file_list')) return redirect('player_management/');

		$this->load->model(array('risk_score_model', 'kyc_status_model'));
        $this->load->library(array('player_manager'));

		$start_today = date('Y-m-d H:i:s', strtotime($this->utils->getNowForMysql() . "-1 days"));
		$end_today   = $this->utils->getNowForMysql();

		$verification_list = $this->utils->getConfig('verification');
		$proof_attachment_type_list = $this->utils->getConfig('proof_attachment_type');

		$verifications = array();
		$attachment_types = array();

		if(!empty($verification_list)){
			$verifications = array_map(function($verification){
				foreach ($verification as $key => $value) {
					return $value;
				}

			}, $verification_list);
		}

		if(!empty($proof_attachment_type_list)){

			foreach ($proof_attachment_type_list as $key => $value) {
				$attachment_types[$value['tag']] = $value['description'];
			}
		}


		$data['conditions'] = $this->safeLoadParams([
			'last_update_date_from'        => $start_today,
			'last_update_date_to'          => $end_today,
			'can_search_last_update_date'  => 1,
			'tag_all'                      => self::TAG_ALL,
			'tag'                          => self::TAG_ALL,
			'kyc_level_id'                 => '',
			'risk_score_all'               => risk_score_model::RISK_SCORE_ALL,
		]);

		$data['verifications'] = $verifications;
		$data['attachment_types'] = $attachment_types;
		$data['tags'] = $this->player_manager->getAllTags();
		$data['risk_score_levels'] = $this->risk_score_model->getRiskScoreLevels();
		$data['kyc_levels'] = $this->kyc_status_model->getAllKycStatus();

		$data['enable_freeze_top_in_list'] = $this->utils->_getEnableFreezeTopWithMethod(__METHOD__, $this->config->item('enable_freeze_top_method_list'));

		$this->loadTemplate(lang('role.404'), '', '', 'report');
		$this->template->add_js('resources/js/bootstrap-notify.min.js');
		$this->template->add_js('resources/js/select2.min.js');
		$this->template->add_css('resources/css/select2.min.css');
		$this->template->add_css('resources/css/player_management/style.css');
		$this->template->write_view('main_content', 'report_management/view_user_kyc_attached_file_report', $data);
		$this->template->render();

	}

}